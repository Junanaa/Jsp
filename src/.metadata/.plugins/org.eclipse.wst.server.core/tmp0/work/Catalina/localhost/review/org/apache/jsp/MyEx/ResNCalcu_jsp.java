/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.15
 * Generated at: 2023-10-31 00:46:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.MyEx;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class ResNCalcu_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

   request.setCharacterEncoding("UTF-8"); //한글 표시용
   String sPWDStr ="";
   String sID ="";
   String sPWD1 ="";
   String sPWD2 ="";
   String sPhone ="";
   String sP1 ="";
   String sP2 ="";
   String sP3 ="";
   String sPRes = "";
   String sYMD ="";
   String sYYYY="";
   String sHobby1 ="";
   String sHobby2 ="";
   String sHobby3 ="";
   int nYYYY = 0;
   int nAge = 0;
   String sNum1="";
   String sNum2="";
   String sCalcu="";
   int nNum1 = 0;
   int nNum2 = 0;
   int nResult = 0;
   
   
   String sDev = request.getParameter("mDev");
   if(sDev.equals("U")){
      sPWDStr ="";
      sID = request.getParameter("mID");
      sPWD1 = request.getParameter("mPWD1");
      sPWD2 = request.getParameter("mPWD2");
      if (!sPWD1.equals(sPWD2)) {
         sPWDStr = "입력한 비번 2개가 다릅니다.";
      }
      else{
         sPWDStr = "입력한 비번 2개가 동일합니다.";
      }
      sPhone = request.getParameter("mPhone");
      sP1 = sPhone.substring(0,3);
      sP2 = sPhone.substring(3,7);
      sP3 = sPhone.substring(7,11);
      sPRes = sP1+"-"+sP2+"-"+sP3; // 이것도 가능
      
      sYMD = request.getParameter("mYMD");
      sYYYY = sYMD.substring(0,4);
      nYYYY = Integer.parseInt(sYYYY);
      nAge = 2023 - nYYYY;
      
      sHobby1 = request.getParameter("mHobby1");
      sHobby2 = request.getParameter("mHobby2");
      sHobby3 = request.getParameter("mHobby3");
      }   
      else if (sDev.equals("C")){
         sNum1 = request.getParameter("mNum1");
         nNum1 = Integer.parseInt(sNum1);
         sNum2 = request.getParameter("mNum2");
         nNum2 = Integer.parseInt(sNum2);
          sCalcu = request.getParameter("mCalcu");
         switch (sCalcu){
            case "P":
               nResult = nNum1 + nNum2;
            break;
            case "M":
               nResult = nNum1 - nNum2;
            break;
            case "S":
               nResult = nNum1 * nNum2;
            break;
            case "D":
               nResult = nNum1 / nNum2;
            break;
         }
      }
   
      out.write("\r\n");
      out.write("      아이디: ");
      out.print(sID);
      out.write("<br>\r\n");
      out.write("      비밀번호: ");
      out.print(sPWD1);
      out.write("<br>\r\n");
      out.write("      비밀번호확인: ");
      out.print(sPWDStr);
      out.write("<br>\r\n");
      out.write("      핸드폰: ");
      out.print(sP1);
      out.write('-');
      out.print(sP2);
      out.write('-');
      out.print(sP3);
      out.write("<br>\r\n");
      out.write("      나이: ");
      out.print(nAge );
      out.write("<br>\r\n");
      out.write("      ");
 if (sHobby1 != null) { 
      out.write("\r\n");
      out.write("      취미1: ");
      out.print(sHobby1);
      out.write("<br>\r\n");
      out.write("      ");
 } 
      out.write("\r\n");
      out.write("      ");
 if (sHobby2 != null) { 
      out.write("\r\n");
      out.write("      취미2: ");
      out.print(sHobby2);
      out.write("<br>\r\n");
      out.write("      ");
 } 
      out.write("\r\n");
      out.write("      ");
 if (sHobby3 != null) { 
      out.write("\r\n");
      out.write("      취미3: ");
      out.print(sHobby3);
      out.write("<br>\r\n");
      out.write("      ");
 } 
      out.write("\r\n");
      out.write("   <br><br>\r\n");
      out.write("\r\n");
      out.write("   <Form action=\"ResNCalcu.jsp\" name=\"CtrlForm\" method=\"post\">\r\n");
      out.write("          <input type=\"Hidden\" name=\"mDev\" value=\"C\"><br>\r\n");
      out.write("             \r\n");
      out.write("      계산기:<input type=\"text\" name=\"mNum1\" size=\"3\" value=\"0\">\r\n");
      out.write("          <select name=\"mCalcu\"size=\"1\">\r\n");
      out.write("             <option value=\"P\" selected>+</option>\r\n");
      out.write("             <option value=\"M\">-</option>\r\n");
      out.write("             <option value=\"S\">*</option>\r\n");
      out.write("             <option value=\"D\">/</option>\r\n");
      out.write("          </select>\r\n");
      out.write("            <input type=\"text\" name=\"mNum2\" size=\"3\" value=\"0\">\r\n");
      out.write("            <input type=\"submit\" value=\"확인\"><br>\r\n");
      out.write("   </Form>\r\n");
      out.write("             <input type=\"text\" name=\"mResult\" size=\"3\" value=\"");
      out.print(nResult);
      out.write("\">\r\n");
      out.write("             \r\n");
      out.write("   </body>\r\n");
      out.write("   </html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
